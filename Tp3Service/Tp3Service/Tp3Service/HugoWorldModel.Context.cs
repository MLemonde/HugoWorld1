//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tp3Service
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HugoWorldEntities : DbContext
    {
        public HugoWorldEntities()
            : base("name=HugoWorldEntities")
        {
            Configuration.LazyLoadingEnabled = false;
            Configuration.ProxyCreationEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Classe> Classes { get; set; }
        public virtual DbSet<CompteJoueur> CompteJoueurs { get; set; }
        public virtual DbSet<EffetItem> EffetItems { get; set; }
        public virtual DbSet<Hero> Heroes { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<Monde> Mondes { get; set; }
        public virtual DbSet<Monstre> Monstres { get; set; }
        public virtual DbSet<ObjetMonde> ObjetMondes { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual int DeleteHero(Nullable<int> heroId)
        {
            var heroIdParameter = heroId.HasValue ?
                new ObjectParameter("HeroId", heroId) :
                new ObjectParameter("HeroId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteHero", heroIdParameter);
        }
    
        public virtual int InsertHero(Nullable<int> compteJoueurId, Nullable<int> niveau, Nullable<long> experience, Nullable<int> x, Nullable<int> y, Nullable<decimal> argent, Nullable<int> statBaseStr, Nullable<int> statBaseDex, Nullable<int> statBaseInt, Nullable<int> statBaseStam, Nullable<int> mondeId, Nullable<int> classeId, string name, Nullable<bool> connected, Nullable<System.DateTime> activity, Nullable<int> pV)
        {
            var compteJoueurIdParameter = compteJoueurId.HasValue ?
                new ObjectParameter("CompteJoueurId", compteJoueurId) :
                new ObjectParameter("CompteJoueurId", typeof(int));
    
            var niveauParameter = niveau.HasValue ?
                new ObjectParameter("Niveau", niveau) :
                new ObjectParameter("Niveau", typeof(int));
    
            var experienceParameter = experience.HasValue ?
                new ObjectParameter("Experience", experience) :
                new ObjectParameter("Experience", typeof(long));
    
            var xParameter = x.HasValue ?
                new ObjectParameter("x", x) :
                new ObjectParameter("x", typeof(int));
    
            var yParameter = y.HasValue ?
                new ObjectParameter("y", y) :
                new ObjectParameter("y", typeof(int));
    
            var argentParameter = argent.HasValue ?
                new ObjectParameter("Argent", argent) :
                new ObjectParameter("Argent", typeof(decimal));
    
            var statBaseStrParameter = statBaseStr.HasValue ?
                new ObjectParameter("StatBaseStr", statBaseStr) :
                new ObjectParameter("StatBaseStr", typeof(int));
    
            var statBaseDexParameter = statBaseDex.HasValue ?
                new ObjectParameter("StatBaseDex", statBaseDex) :
                new ObjectParameter("StatBaseDex", typeof(int));
    
            var statBaseIntParameter = statBaseInt.HasValue ?
                new ObjectParameter("StatBaseInt", statBaseInt) :
                new ObjectParameter("StatBaseInt", typeof(int));
    
            var statBaseStamParameter = statBaseStam.HasValue ?
                new ObjectParameter("StatBaseStam", statBaseStam) :
                new ObjectParameter("StatBaseStam", typeof(int));
    
            var mondeIdParameter = mondeId.HasValue ?
                new ObjectParameter("MondeId", mondeId) :
                new ObjectParameter("MondeId", typeof(int));
    
            var classeIdParameter = classeId.HasValue ?
                new ObjectParameter("ClasseId", classeId) :
                new ObjectParameter("ClasseId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var connectedParameter = connected.HasValue ?
                new ObjectParameter("Connected", connected) :
                new ObjectParameter("Connected", typeof(bool));
    
            var activityParameter = activity.HasValue ?
                new ObjectParameter("Activity", activity) :
                new ObjectParameter("Activity", typeof(System.DateTime));
    
            var pVParameter = pV.HasValue ?
                new ObjectParameter("PV", pV) :
                new ObjectParameter("PV", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertHero", compteJoueurIdParameter, niveauParameter, experienceParameter, xParameter, yParameter, argentParameter, statBaseStrParameter, statBaseDexParameter, statBaseIntParameter, statBaseStamParameter, mondeIdParameter, classeIdParameter, nameParameter, connectedParameter, activityParameter, pVParameter);
        }
    
        public virtual int UpdateHero(Nullable<int> heroId, Nullable<int> mondeId, Nullable<int> classeId, Nullable<int> compteJoueurId, Nullable<int> niveau, Nullable<long> experience, Nullable<int> x, Nullable<int> y, Nullable<decimal> argent, Nullable<int> statBaseStr, Nullable<int> statBaseDex, Nullable<int> statBaseInt, Nullable<int> statBaseStam, string name, Nullable<bool> connected, Nullable<System.DateTime> activity, Nullable<int> pV)
        {
            var heroIdParameter = heroId.HasValue ?
                new ObjectParameter("HeroId", heroId) :
                new ObjectParameter("HeroId", typeof(int));
    
            var mondeIdParameter = mondeId.HasValue ?
                new ObjectParameter("MondeId", mondeId) :
                new ObjectParameter("MondeId", typeof(int));
    
            var classeIdParameter = classeId.HasValue ?
                new ObjectParameter("ClasseId", classeId) :
                new ObjectParameter("ClasseId", typeof(int));
    
            var compteJoueurIdParameter = compteJoueurId.HasValue ?
                new ObjectParameter("CompteJoueurId", compteJoueurId) :
                new ObjectParameter("CompteJoueurId", typeof(int));
    
            var niveauParameter = niveau.HasValue ?
                new ObjectParameter("Niveau", niveau) :
                new ObjectParameter("Niveau", typeof(int));
    
            var experienceParameter = experience.HasValue ?
                new ObjectParameter("Experience", experience) :
                new ObjectParameter("Experience", typeof(long));
    
            var xParameter = x.HasValue ?
                new ObjectParameter("x", x) :
                new ObjectParameter("x", typeof(int));
    
            var yParameter = y.HasValue ?
                new ObjectParameter("y", y) :
                new ObjectParameter("y", typeof(int));
    
            var argentParameter = argent.HasValue ?
                new ObjectParameter("Argent", argent) :
                new ObjectParameter("Argent", typeof(decimal));
    
            var statBaseStrParameter = statBaseStr.HasValue ?
                new ObjectParameter("StatBaseStr", statBaseStr) :
                new ObjectParameter("StatBaseStr", typeof(int));
    
            var statBaseDexParameter = statBaseDex.HasValue ?
                new ObjectParameter("StatBaseDex", statBaseDex) :
                new ObjectParameter("StatBaseDex", typeof(int));
    
            var statBaseIntParameter = statBaseInt.HasValue ?
                new ObjectParameter("StatBaseInt", statBaseInt) :
                new ObjectParameter("StatBaseInt", typeof(int));
    
            var statBaseStamParameter = statBaseStam.HasValue ?
                new ObjectParameter("StatBaseStam", statBaseStam) :
                new ObjectParameter("StatBaseStam", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var connectedParameter = connected.HasValue ?
                new ObjectParameter("Connected", connected) :
                new ObjectParameter("Connected", typeof(bool));
    
            var activityParameter = activity.HasValue ?
                new ObjectParameter("Activity", activity) :
                new ObjectParameter("Activity", typeof(System.DateTime));
    
            var pVParameter = pV.HasValue ?
                new ObjectParameter("PV", pV) :
                new ObjectParameter("PV", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateHero", heroIdParameter, mondeIdParameter, classeIdParameter, compteJoueurIdParameter, niveauParameter, experienceParameter, xParameter, yParameter, argentParameter, statBaseStrParameter, statBaseDexParameter, statBaseIntParameter, statBaseStamParameter, nameParameter, connectedParameter, activityParameter, pVParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
