//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Tp3Service.HugoWorldEntities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetse72ccaed9d33b373917e999e14de1a7399044d978e11493f063d1648943d5dac))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySetse72ccaed9d33b373917e999e14de1a7399044d978e11493f063d1648943d5dac : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "e72ccaed9d33b373917e999e14de1a7399044d978e11493f063d1648943d5dac"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "ModelStoreContainer.Classe")
            {
                return GetView0();
            }

            if (extentName == "ModelStoreContainer.CompteJoueur")
            {
                return GetView1();
            }

            if (extentName == "ModelStoreContainer.EffetItem")
            {
                return GetView2();
            }

            if (extentName == "ModelStoreContainer.Hero")
            {
                return GetView3();
            }

            if (extentName == "ModelStoreContainer.Item")
            {
                return GetView4();
            }

            if (extentName == "ModelStoreContainer.Monde")
            {
                return GetView5();
            }

            if (extentName == "ModelStoreContainer.Monstre")
            {
                return GetView6();
            }

            if (extentName == "ModelStoreContainer.ObjetMonde")
            {
                return GetView7();
            }

            if (extentName == "ModelStoreContainer.InventaireHero")
            {
                return GetView8();
            }

            if (extentName == "HugoWorldEntities.Classes")
            {
                return GetView9();
            }

            if (extentName == "HugoWorldEntities.CompteJoueurs")
            {
                return GetView10();
            }

            if (extentName == "HugoWorldEntities.EffetItems")
            {
                return GetView11();
            }

            if (extentName == "HugoWorldEntities.Heroes")
            {
                return GetView12();
            }

            if (extentName == "HugoWorldEntities.Items")
            {
                return GetView13();
            }

            if (extentName == "HugoWorldEntities.Mondes")
            {
                return GetView14();
            }

            if (extentName == "HugoWorldEntities.Monstres")
            {
                return GetView15();
            }

            if (extentName == "HugoWorldEntities.ObjetMondes")
            {
                return GetView16();
            }

            if (extentName == "HugoWorldEntities.InventaireHero")
            {
                return GetView17();
            }

            if (extentName == "ModelStoreContainer.sysdiagrams")
            {
                return GetView18();
            }

            if (extentName == "HugoWorldEntities.sysdiagrams")
            {
                return GetView19();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for ModelStoreContainer.Classe.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Classe
        [Model.Store.Classe](T1.Classe_Id, T1.Classe_NomClasse, T1.Classe_Description, T1.Classe_StatPoidsStr, T1.Classe_StatPoidsDex, T1.Classe_StatPoidsInt, T1.Classe_StatPoidsStam, T1.Classe_MondeId)
    FROM (
        SELECT 
            T.Id AS Classe_Id, 
            T.NomClasse AS Classe_NomClasse, 
            T.Description AS Classe_Description, 
            T.StatPoidsStr AS Classe_StatPoidsStr, 
            T.StatPoidsDex AS Classe_StatPoidsDex, 
            T.StatPoidsInt AS Classe_StatPoidsInt, 
            T.StatPoidsStam AS Classe_StatPoidsStam, 
            T.MondeId AS Classe_MondeId, 
            True AS _from0
        FROM HugoWorldEntities.Classes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelStoreContainer.CompteJoueur.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CompteJoueur
        [Model.Store.CompteJoueur](T1.CompteJoueur_Id, T1.CompteJoueur_NomUtilisateur, T1.CompteJoueur_Password, T1.CompteJoueur_Courriel, T1.CompteJoueur_Prenom, T1.CompteJoueur_Nom, T1.CompteJoueur_TypeUtilisateur)
    FROM (
        SELECT 
            T.Id AS CompteJoueur_Id, 
            T.NomUtilisateur AS CompteJoueur_NomUtilisateur, 
            T.Password AS CompteJoueur_Password, 
            T.Courriel AS CompteJoueur_Courriel, 
            T.Prenom AS CompteJoueur_Prenom, 
            T.Nom AS CompteJoueur_Nom, 
            T.TypeUtilisateur AS CompteJoueur_TypeUtilisateur, 
            True AS _from0
        FROM HugoWorldEntities.CompteJoueurs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelStoreContainer.EffetItem.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EffetItem
        [Model.Store.EffetItem](T1.EffetItem_Id, T1.EffetItem_ItemId, T1.EffetItem_ValeurEffet, T1.EffetItem_TypeEffet)
    FROM (
        SELECT 
            T.Id AS EffetItem_Id, 
            T.ItemId AS EffetItem_ItemId, 
            T.ValeurEffet AS EffetItem_ValeurEffet, 
            T.TypeEffet AS EffetItem_TypeEffet, 
            True AS _from0
        FROM HugoWorldEntities.EffetItems AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelStoreContainer.Hero.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Hero
        [Model.Store.Hero](T1.Hero_CompteJoueurId, T1.Hero_Connected, T1.Hero_Name, T1.Hero_Id, T1.Hero_Niveau, T1.Hero_Experience, T1.Hero_x, T1.Hero_y, T1.Hero_Argent, T1.Hero_StatBaseStr, T1.Hero_StatBaseDex, T1.Hero_StatBaseInt, T1.Hero_StatBaseStam, T1.Hero_MondeId, T1.Hero_ClasseId)
    FROM (
        SELECT 
            T.CompteJoueurId AS Hero_CompteJoueurId, 
            T.Connected AS Hero_Connected, 
            T.Name AS Hero_Name, 
            T.Id AS Hero_Id, 
            T.Niveau AS Hero_Niveau, 
            T.Experience AS Hero_Experience, 
            T.x AS Hero_x, 
            T.y AS Hero_y, 
            T.Argent AS Hero_Argent, 
            T.StatBaseStr AS Hero_StatBaseStr, 
            T.StatBaseDex AS Hero_StatBaseDex, 
            T.StatBaseInt AS Hero_StatBaseInt, 
            T.StatBaseStam AS Hero_StatBaseStam, 
            T.MondeId AS Hero_MondeId, 
            T.ClasseId AS Hero_ClasseId, 
            True AS _from0
        FROM HugoWorldEntities.Heroes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelStoreContainer.Item.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Item
        [Model.Store.Item](T1.Item_Id, T1.Item_Nom, T1.Item_Description, T1.Item_x, T1.Item_y, T1.Item_Niveau, T1.Item_ValeurArgent, T1.Item_Poids, T1.Item_ReqNiveau, T1.Item_ReqForce, T1.Item_ReqDexterite, T1.Item_ReqIntelligence, T1.Item_ReqEndurance, T1.Item_MondeId, T1.Item_Quantite)
    FROM (
        SELECT 
            T.Id AS Item_Id, 
            T.Nom AS Item_Nom, 
            T.Description AS Item_Description, 
            T.x AS Item_x, 
            T.y AS Item_y, 
            T.Niveau AS Item_Niveau, 
            T.ValeurArgent AS Item_ValeurArgent, 
            T.Poids AS Item_Poids, 
            T.ReqNiveau AS Item_ReqNiveau, 
            T.ReqForce AS Item_ReqForce, 
            T.ReqDexterite AS Item_ReqDexterite, 
            T.ReqIntelligence AS Item_ReqIntelligence, 
            T.ReqEndurance AS Item_ReqEndurance, 
            T.MondeId AS Item_MondeId, 
            T.Quantite AS Item_Quantite, 
            True AS _from0
        FROM HugoWorldEntities.Items AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelStoreContainer.Monde.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Monde
        [Model.Store.Monde](T1.Monde_Id, T1.Monde_Description, T1.Monde_LimiteX, T1.Monde_LimiteY)
    FROM (
        SELECT 
            T.Id AS Monde_Id, 
            T.Description AS Monde_Description, 
            T.LimiteX AS Monde_LimiteX, 
            T.LimiteY AS Monde_LimiteY, 
            True AS _from0
        FROM HugoWorldEntities.Mondes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelStoreContainer.Monstre.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Monstre
        [Model.Store.Monstre](T1.Monstre_Id, T1.Monstre_Nom, T1.Monstre_Niveau, T1.Monstre_x, T1.Monstre_y, T1.Monstre_StatPV, T1.Monstre_StatDmgMin, T1.Monstre_StatDmgMax, T1.Monstre_MondeId)
    FROM (
        SELECT 
            T.Id AS Monstre_Id, 
            T.Nom AS Monstre_Nom, 
            T.Niveau AS Monstre_Niveau, 
            T.x AS Monstre_x, 
            T.y AS Monstre_y, 
            T.StatPV AS Monstre_StatPV, 
            T.StatDmgMin AS Monstre_StatDmgMin, 
            T.StatDmgMax AS Monstre_StatDmgMax, 
            T.MondeId AS Monstre_MondeId, 
            True AS _from0
        FROM HugoWorldEntities.Monstres AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelStoreContainer.ObjetMonde.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ObjetMonde
        [Model.Store.ObjetMonde](T1.ObjetMonde_Id, T1.ObjetMonde_x, T1.ObjetMonde_y, T1.ObjetMonde_Description, T1.ObjetMonde_TypeObjet, T1.ObjetMonde_MondeId)
    FROM (
        SELECT 
            T.Id AS ObjetMonde_Id, 
            T.x AS ObjetMonde_x, 
            T.y AS ObjetMonde_y, 
            T.Description AS ObjetMonde_Description, 
            T.TypeObjet AS ObjetMonde_TypeObjet, 
            T.MondeId AS ObjetMonde_MondeId, 
            True AS _from0
        FROM HugoWorldEntities.ObjetMondes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelStoreContainer.InventaireHero.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InventaireHero
        [Model.Store.InventaireHero](T1.InventaireHero_IdHero, T1.InventaireHero_ItemId)
    FROM (
        SELECT 
            Key(T.Hero).Id AS InventaireHero_IdHero, 
            Key(T.Item).Id AS InventaireHero_ItemId, 
            True AS _from0
        FROM HugoWorldEntities.InventaireHero AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HugoWorldEntities.Classes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Classes
        [Model.Classe](T1.Classe_Id, T1.Classe_NomClasse, T1.Classe_Description, T1.Classe_StatPoidsStr, T1.Classe_StatPoidsDex, T1.Classe_StatPoidsInt, T1.Classe_StatPoidsStam, T1.Classe_MondeId)
    FROM (
        SELECT 
            T.Id AS Classe_Id, 
            T.NomClasse AS Classe_NomClasse, 
            T.Description AS Classe_Description, 
            T.StatPoidsStr AS Classe_StatPoidsStr, 
            T.StatPoidsDex AS Classe_StatPoidsDex, 
            T.StatPoidsInt AS Classe_StatPoidsInt, 
            T.StatPoidsStam AS Classe_StatPoidsStam, 
            T.MondeId AS Classe_MondeId, 
            True AS _from0
        FROM ModelStoreContainer.Classe AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HugoWorldEntities.CompteJoueurs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CompteJoueurs
        [Model.CompteJoueur](T1.CompteJoueur_Id, T1.CompteJoueur_NomUtilisateur, T1.CompteJoueur_Password, T1.CompteJoueur_Courriel, T1.CompteJoueur_Prenom, T1.CompteJoueur_Nom, T1.CompteJoueur_TypeUtilisateur)
    FROM (
        SELECT 
            T.Id AS CompteJoueur_Id, 
            T.NomUtilisateur AS CompteJoueur_NomUtilisateur, 
            T.Password AS CompteJoueur_Password, 
            T.Courriel AS CompteJoueur_Courriel, 
            T.Prenom AS CompteJoueur_Prenom, 
            T.Nom AS CompteJoueur_Nom, 
            T.TypeUtilisateur AS CompteJoueur_TypeUtilisateur, 
            True AS _from0
        FROM ModelStoreContainer.CompteJoueur AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HugoWorldEntities.EffetItems.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EffetItems
        [Model.EffetItem](T1.EffetItem_Id, T1.EffetItem_ItemId, T1.EffetItem_ValeurEffet, T1.EffetItem_TypeEffet)
    FROM (
        SELECT 
            T.Id AS EffetItem_Id, 
            T.ItemId AS EffetItem_ItemId, 
            T.ValeurEffet AS EffetItem_ValeurEffet, 
            T.TypeEffet AS EffetItem_TypeEffet, 
            True AS _from0
        FROM ModelStoreContainer.EffetItem AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HugoWorldEntities.Heroes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Heroes
        [Model.Hero](T1.Hero_CompteJoueurId, T1.Hero_Connected, T1.Hero_Name, T1.Hero_Id, T1.Hero_Niveau, T1.Hero_Experience, T1.Hero_x, T1.Hero_y, T1.Hero_Argent, T1.Hero_StatBaseStr, T1.Hero_StatBaseDex, T1.Hero_StatBaseInt, T1.Hero_StatBaseStam, T1.Hero_MondeId, T1.Hero_ClasseId)
    FROM (
        SELECT 
            T.CompteJoueurId AS Hero_CompteJoueurId, 
            T.Connected AS Hero_Connected, 
            T.Name AS Hero_Name, 
            T.Id AS Hero_Id, 
            T.Niveau AS Hero_Niveau, 
            T.Experience AS Hero_Experience, 
            T.x AS Hero_x, 
            T.y AS Hero_y, 
            T.Argent AS Hero_Argent, 
            T.StatBaseStr AS Hero_StatBaseStr, 
            T.StatBaseDex AS Hero_StatBaseDex, 
            T.StatBaseInt AS Hero_StatBaseInt, 
            T.StatBaseStam AS Hero_StatBaseStam, 
            T.MondeId AS Hero_MondeId, 
            T.ClasseId AS Hero_ClasseId, 
            True AS _from0
        FROM ModelStoreContainer.Hero AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HugoWorldEntities.Items.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Items
        [Model.Item](T1.Item_Id, T1.Item_Nom, T1.Item_Description, T1.Item_x, T1.Item_y, T1.Item_Niveau, T1.Item_ValeurArgent, T1.Item_Poids, T1.Item_ReqNiveau, T1.Item_ReqForce, T1.Item_ReqDexterite, T1.Item_ReqIntelligence, T1.Item_ReqEndurance, T1.Item_MondeId, T1.Item_Quantite)
    FROM (
        SELECT 
            T.Id AS Item_Id, 
            T.Nom AS Item_Nom, 
            T.Description AS Item_Description, 
            T.x AS Item_x, 
            T.y AS Item_y, 
            T.Niveau AS Item_Niveau, 
            T.ValeurArgent AS Item_ValeurArgent, 
            T.Poids AS Item_Poids, 
            T.ReqNiveau AS Item_ReqNiveau, 
            T.ReqForce AS Item_ReqForce, 
            T.ReqDexterite AS Item_ReqDexterite, 
            T.ReqIntelligence AS Item_ReqIntelligence, 
            T.ReqEndurance AS Item_ReqEndurance, 
            T.MondeId AS Item_MondeId, 
            T.Quantite AS Item_Quantite, 
            True AS _from0
        FROM ModelStoreContainer.Item AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HugoWorldEntities.Mondes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Mondes
        [Model.Monde](T1.Monde_Id, T1.Monde_Description, T1.Monde_LimiteX, T1.Monde_LimiteY)
    FROM (
        SELECT 
            T.Id AS Monde_Id, 
            T.Description AS Monde_Description, 
            T.LimiteX AS Monde_LimiteX, 
            T.LimiteY AS Monde_LimiteY, 
            True AS _from0
        FROM ModelStoreContainer.Monde AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HugoWorldEntities.Monstres.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Monstres
        [Model.Monstre](T1.Monstre_Id, T1.Monstre_Nom, T1.Monstre_Niveau, T1.Monstre_x, T1.Monstre_y, T1.Monstre_StatPV, T1.Monstre_StatDmgMin, T1.Monstre_StatDmgMax, T1.Monstre_MondeId)
    FROM (
        SELECT 
            T.Id AS Monstre_Id, 
            T.Nom AS Monstre_Nom, 
            T.Niveau AS Monstre_Niveau, 
            T.x AS Monstre_x, 
            T.y AS Monstre_y, 
            T.StatPV AS Monstre_StatPV, 
            T.StatDmgMin AS Monstre_StatDmgMin, 
            T.StatDmgMax AS Monstre_StatDmgMax, 
            T.MondeId AS Monstre_MondeId, 
            True AS _from0
        FROM ModelStoreContainer.Monstre AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HugoWorldEntities.ObjetMondes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ObjetMondes
        [Model.ObjetMonde](T1.ObjetMonde_Id, T1.ObjetMonde_x, T1.ObjetMonde_y, T1.ObjetMonde_Description, T1.ObjetMonde_TypeObjet, T1.ObjetMonde_MondeId)
    FROM (
        SELECT 
            T.Id AS ObjetMonde_Id, 
            T.x AS ObjetMonde_x, 
            T.y AS ObjetMonde_y, 
            T.Description AS ObjetMonde_Description, 
            T.TypeObjet AS ObjetMonde_TypeObjet, 
            T.MondeId AS ObjetMonde_MondeId, 
            True AS _from0
        FROM ModelStoreContainer.ObjetMonde AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HugoWorldEntities.InventaireHero.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InventaireHero
        [Model.InventaireHero](T3.InventaireHero_Hero, T3.InventaireHero_Item)
    FROM (
        SELECT -- Constructing Hero
            CreateRef(HugoWorldEntities.Heroes, row(T2.InventaireHero_Hero_Id), [Model.Hero]) AS InventaireHero_Hero, 
            T2.InventaireHero_Item
        FROM (
            SELECT -- Constructing Item
                T1.InventaireHero_Hero_Id, 
                CreateRef(HugoWorldEntities.Items, row(T1.InventaireHero_Item_Id), [Model.Item]) AS InventaireHero_Item
            FROM (
                SELECT 
                    T.IdHero AS InventaireHero_Hero_Id, 
                    T.ItemId AS InventaireHero_Item_Id, 
                    True AS _from0
                FROM ModelStoreContainer.InventaireHero AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ModelStoreContainer.sysdiagrams.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing sysdiagrams
        [Model.Store.sysdiagrams](T1.sysdiagrams_name, T1.[sysdiagrams.principal_id], T1.[sysdiagrams.diagram_id], T1.sysdiagrams_version, T1.sysdiagrams_definition)
    FROM (
        SELECT 
            T.name AS sysdiagrams_name, 
            T.principal_id AS [sysdiagrams.principal_id], 
            T.diagram_id AS [sysdiagrams.diagram_id], 
            T.version AS sysdiagrams_version, 
            T.definition AS sysdiagrams_definition, 
            True AS _from0
        FROM HugoWorldEntities.sysdiagrams AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for HugoWorldEntities.sysdiagrams.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing sysdiagrams
        [Model.sysdiagram](T1.sysdiagram_name, T1.[sysdiagram.principal_id], T1.[sysdiagram.diagram_id], T1.sysdiagram_version, T1.sysdiagram_definition)
    FROM (
        SELECT 
            T.name AS sysdiagram_name, 
            T.principal_id AS [sysdiagram.principal_id], 
            T.diagram_id AS [sysdiagram.diagram_id], 
            T.version AS sysdiagram_version, 
            T.definition AS sysdiagram_definition, 
            True AS _from0
        FROM ModelStoreContainer.sysdiagrams AS T
    ) AS T1");
        }
    }
}
